syntax = "proto3";

package snakesim;

// Define a message for 2D positions
message Position {
    int32 x = 1;
    int32 y = 2;
}

enum Direction {
    UP = 0;
    DOWN = 1;
    LEFT = 2;
    RIGHT = 3;
}

// Message to define RGB color mapping
message RGB {
    int32 r = 1;
    int32 g = 2;
    int32 b = 3;
}


// Messages for STREAMING ######################################

// Message representing each snake's properties
message SnakeStep {
    string snake_id = 1;
    Position curr_head = 2;
    Position prev_head = 3;
    Position curr_tail = 4;
    Position head_dir = 5;
    Position tail_dir = 6;
    bool did_eat = 7;
    string did_turn = 8; // Can be empty string if null
    repeated Position body = 9;
}

// Message representing the state at a particular game step
message StepData {
    repeated SnakeStep snakes = 1;
    repeated Position food = 2;
    uint32 step = 3;
    bool full_state = 4;
}

// Message representing the metadata for the game
message RunMetaData {
    int32 width = 1;
    int32 height = 2;
    int32 food_value = 3;
    int32 free_value = 4;
    int32 blocked_value = 5;
    map<int32, RGB> color_mapping = 6;
    repeated SnakeData snake_data = 7;
    repeated int32 base_map = 8;
}

// Main message for the game configuration and state
message RunData {
    RunMetaData run_meta_data = 1;
    // Steps: map each step number to a StepData message
    map<int32, StepData> steps = 2;
}

// Define SnakeData with color information for each snake
message SnakeData {
    string snake_id = 1;
    RGB head_color = 2;
    RGB body_color = 3;
}

enum MessageType {
    RUN_DATA = 0;
    STEP_DATA = 1;
    RUN_META_DATA = 2;
    PIXEL_CHANGES = 3;
}

message MsgWrapper {
    MessageType type = 1;
    bytes payload = 2;
}

message PixelChanges {
    repeated PixelData pixels = 1;
    bool full_state = 2;
}

message PixelData {
    Position coord = 1;
    RGB color = 2;
}

// MESSAGES BETWEEN SNAKE AND ENVIRONMENT ######################################

message EnvData {
    int32 width = 1;
    int32 height = 2;
    bytes map = 3;
    repeated Position food = 4;
    int32 FOOD_VALUE = 5;
    int32 FREE_VALUE = 6;
    int32 BLOCKED_VALUE = 7;
}

message SnakeAction {
    Position action = 2;
}

// client -> server Requests ######################################

enum RequestType {
    PIXEL_CHANGES_REQ = 0;
    STEP_DATA_REQ = 1;
    RUN_META_DATA_REQ = 2;
}

message Request{
    RequestType type = 1;
    bytes payload = 2;
}

message PixelChangesRequest {
    // The step number for which the pixel changes are requested, end_step should be treated as inclusive
    int32 start_step = 1;
    int32 end_step = 2;
}

message StepDataRequest {
    // The step number for which the step data is requested, end_step should be treated as inclusive
    int32 start_step = 1;
    int32 end_step = 2;
    bool full_state = 3;
}

message RunMetaDataRequest {
}

// server -> client messages ######################################

message RequestAck {
    RequestType type = 1;
    bytes payload = 2;
}

message RunUpdate {
    int32 final_step = 1;
}

// ############################################################

message Empty {
}

service RemoteSnakeService {
    rpc initEnvData(Empty) returns (EnvData) {}
    rpc update(stream SnakeAction) returns (stream EnvData) {}
}
